{"version":3,"sources":["logo.svg","Input.js","Header.js","FulfilledWishes.js","MyWishlist.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","props","id","onChange","event","changeText","value","inputValue","type","display","className","onClick","updateWish","document","getElementById","clicked","Header","len","FulfilledWishes","showWishlist","arr","map","v","index","key","fullDate","style","margin","MyWishlist","state","wishListArray","show","fullfilledArray","date","fulfilledDate","addWishHandler","e","copyOfArray","dateMe","Date","toLocaleString","unshift","console","log","setState","alert","removeWishHandler","removeOfArray","remove","splice","removedElemt","fullfiledArray","changeHandler","target","updateMe","indexChanged","editWish","wishOfMine","disabledForAdd","this","Icon","width","length","edit","editMe","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b56db540.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\n\r\nconst Input = (props) => {\r\n\r\n    //let wish = document.getElementById('inputWish').value;\r\n   // console.log(wish);\r\n   //document.getElementById('dis').style.display={props.disabled}\r\n   \r\n\r\n\r\n    return (\r\n\r\n\r\n\r\n        <div>\r\n            <input id=\"inputWish\" onChange={(event)=>props.changeText(event)}   value={props.inputValue} type='text'></input>\r\n           {\r\n           (props.display)\r\n            ?<button  className='cmnbtn up' onClick={()=>{props.updateWish(document.getElementById('inputWish').value)}} >Update My Wish</button>:null\r\n           }\r\n            \r\n           {\r\n           (!props.display)\r\n            ?<button className='cmnbtn add' onClick={()=>{props.clicked(document.getElementById('inputWish').value)}} >Add New Wish</button> :null\r\n           }\r\n            \r\n        </div>\r\n    );   \r\n};\r\n\r\nexport default Input;","import React from 'react';\r\n\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div className='header'>\r\n        <h1> My Wishlist</h1>\r\n            <h3>I have below {props.len} Wishes : </h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst FulfilledWishes = (props) => {\r\n\r\n    let showWishlist= props.arr.map((v,index)=> \r\n    <div key={index}   index={index} > \r\n    <p id=\"wish\">{v}</p> \r\n    <cite className=\"time\">Fulfilled on :{props.fullDate[index]}</cite>\r\n    </div>);\r\n    return (\r\n        <div style={{margin:'100px auto'}}>\r\n        <h3>My fulfilled Wishes</h3>\r\n        <div className='fulfilledWishes'>{showWishlist}</div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FulfilledWishes;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport  Input from './Input'; \r\nimport  Header from './Header'; \r\nimport  FulfilledWishes from './FulfilledWishes';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { trash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCoffee } from '@fortawesome/free-solid-svg-icons';\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\n\r\n\r\nclass MyWishlist extends Component {\r\n\r\n    state={\r\n      wishListArray:[\"Paris\",\"Jordan\",\"spitty valley\"],\r\n      inputValue:'',\r\n       index:0,\r\n       show:false,\r\n       fullfilledArray:['Norway','Madras'],\r\n       date: ['9/03/2020, 01:14:46 PM','11/04/2019, 04:14:46 PM','9/05/2018, 01:02:46 AM'],\r\n       fulfilledDate:['9/03/2020, 01:14:46 PM','11/04/2019, 04:14:46 PM']\r\n       \r\n     \r\n\r\n      \r\n     \r\n      \r\n    }\r\n\r\n\r\n    addWishHandler = (e) => {\r\n        let copyOfArray = [...this.state.wishListArray];\r\n\r\n        let dateMe = [...this.state.date];\r\n\r\n\r\n         \r\n       \r\n           \r\n        \r\n\r\n        var date =  new Date().toLocaleString() ;\r\n\r\n        dateMe.unshift(date);\r\n    \r\n\r\n        console.log(e);\r\n      if(e){\r\n        copyOfArray.unshift(e);\r\n\r\n        this.setState({ wishListArray: copyOfArray,inputValue:'',date:dateMe });\r\n\r\n      }\r\n        \r\n    else{alert('No wish to added , I am happy , whatever I have')};\r\n        \r\n        \r\n\r\n    };\r\n\r\n\r\n    removeWishHandler = (index) => {\r\n\r\n        let removeOfArray = [...this.state.wishListArray];\r\n        let remove = [...this.state.wishListArray];\r\n         \r\n        let dateMe = [...this.state.fulfilledDate];\r\n\r\n\r\n         \r\n       \r\n           \r\n        \r\n\r\n        var date =  new Date().toLocaleString() ;\r\n\r\n        dateMe.unshift(date);\r\n    \r\n       // removeOfArray.unshift(index);\r\n          removeOfArray.splice(index,1);\r\n          let removedElemt=remove[index];\r\n\r\n          let fullfiledArray=[...this.state.fullfilledArray];\r\n          fullfiledArray.unshift(removedElemt);\r\n        this.setState({ wishListArray: removeOfArray ,fullfilledArray:fullfiledArray,fulfilledDate:dateMe});\r\n        \r\n        \r\n\r\n    };\r\n\r\n\r\n    changeHandler = (event) => {\r\n\r\n       \r\n         \r\n\r\n        this.setState({ inputValue: event.target.value });\r\n\r\n    };\r\n\r\n    \r\n\r\n    updateMe= (e) =>{ \r\n           \r\n        let copyOfArray = [...this.state.wishListArray];\r\n        let indexChanged=this.state.index;  \r\n      \r\n      \r\n        let dateMe = [...this.state.date];\r\n\r\n        var date =  new Date().toLocaleString() ;\r\n\r\n        dateMe[indexChanged]=date;\r\n\r\n\r\n      \r\n       \r\n\r\n        if(e){\r\n\r\n        copyOfArray[indexChanged]=e;\r\n\r\n      \r\n\r\n        this.setState({ wishListArray: copyOfArray,inputValue:'',index:0,show:false,date:dateMe });}\r\n\r\n    }\r\n    editWish = (index) => {\r\n\r\n       \r\n         let wishOfMine= this.state.wishListArray[index];\r\n\r\n         this.setState({ inputValue: wishOfMine,disabledForAdd:false,index:index,show:true});\r\n\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n      \r\n    let showWishlist= this.state.wishListArray.map((v,index)=> \r\n    <div key={index}   index={index} className=\"Wishlist\"> \r\n    <p >{v}</p> \r\n    <cite className=\"time\">Created on :  {this.state.date[index]}</cite>\r\n    {/* <FontAwesomeIcon icon={faCoffee} /> */}\r\n    \r\n    <Icon>check</Icon>\r\n    {/* <FontAwesomeIcon icon={trash} /> */}\r\n    <button onClick={()=>this.editWish(index)} className='upbtn cmnbtn'>Update My Wish</button>\r\n    <button onClick={()=>this.removeWishHandler(index)} className='btn cmnbtn'>Wish Fulfilled </button>\r\n    </div>);\r\n\r\n\r\n        return (\r\n\r\n            <div style={{width:'500px',margin:'50px auto'}}>\r\n             <Header  len={this.state.wishListArray.length}/>\r\n                <div>{showWishlist}</div>\r\n                <Input  display={this.state.show} updateWish={this.updateMe}   \r\n                edit={this.editMe} inputValue={this.state.inputValue} changeText={this.changeHandler} clicked={this.addWishHandler}/>\r\n                <FulfilledWishes fullDate={this.state.fulfilledDate} arr={this.state.fullfilledArray}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyWishlist;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport  Wishlist from './MyWishlist'; \n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n   \n    <Wishlist/>\n   \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}